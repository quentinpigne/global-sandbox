version: '3.8'

services:
  postgres:
    image: postgres:13.1-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_MULTIPLE_DATABASES: springsandboxjava,springsandboxkotlin
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ${SANDBOX_BASE_DIR}/deployment/postgres/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d

  mongo:
    image: mongo:4.4.3
    container_name: mongo
    restart: always
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb

  prometheus:
    image: prom/prometheus:v2.24.1
    container_name: prometheus
    restart: always
    ports:
      - 9090:9090
    volumes:
      - prometheus-data:/prometheus
      - ${SANDBOX_BASE_DIR}/deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:7.3.7
    container_name: grafana
    restart: always
    ports:
      - 3000:3000
    volumes:
      - grafana-data:/var/lib/grafana
      - grafana-config:/etc/grafana

  fluentd:
    image: fluentd:v1.11.4-debian-1.0
    build: ../build/fluentd
    container_name: fluentd
    restart: always
    depends_on:
      - mongo

  terracotta:
    image: terracotta-server-oss:5.7.0
    build: ../build/terracotta
    container_name: terracotta

  spring-gateway-sandbox:
    image: maven:3.6.3-openjdk-8
    container_name: spring-gateway-sandbox
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - 8080:8080
    volumes:
      - maven-data:/root/.m2
      - ${SANDBOX_BASE_DIR}/spring-gateway-sandbox/:/src
    working_dir: /src
    command: mvn spring-boot:run

  spring-sandbox-java:
    image: maven:3.6.3-openjdk-8
    container_name: spring-sandbox-java
    depends_on:
      - fluentd
      - postgres
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: springsandboxjava
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - maven-data:/root/.m2
      - ${SANDBOX_BASE_DIR}/spring-sandbox-java/:/src
    working_dir: /src
    command: mvn spring-boot:run

  spring-sandbox-kotlin:
    image: gradle:6.8.1-jdk8
    container_name: spring-sandbox-kotlin
    depends_on:
      - fluentd
      - postgres
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: springsandboxkotlin
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - gradle-data:/home/gradle/.gradle
      - ${SANDBOX_BASE_DIR}/spring-sandbox-kotlin/:/home/gradle/project
    working_dir: /home/gradle/project
    command: gradle bootRun

  nodejs-sandbox:
    image: node:15.6.0
    container_name: nodejs-sandbox
    volumes:
      - ${SANDBOX_BASE_DIR}/nodejs-sandbox/:/src
    working_dir: /src
    command: npm start

  reactjs-sandbox:
    image: node:15.6.0
    container_name: reactjs-sandbox
    ports:
      - 3000:3000
    volumes:
      - ${SANDBOX_BASE_DIR}/reactjs-sandbox/:/src
    working_dir: /src
    command: npm start

networks:
  default:
    name: dev-sandbox

volumes:
  postgres-data:
    name: postgres-data
  mongo-data:
    name: mongo-data
  mongo-config:
    name: mongo-config
  prometheus-data:
    name: prometheus-data
  grafana-data:
    name: grafana-data
  grafana-config:
    name: grafana-config
  maven-data:
    name: maven-data
  gradle-data:
    name: gradle-data
